from aiogram.types.callback_query import CallbackQuery
from utils.db_loader import load_beer_list
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from utils.votes import update_vote_results

async def handle_beer_selection(cq: CallbackQuery, beer_id: int):
    try:
        # –ù–∞–π–¥–∏—Ç–µ –ø–∏–≤–æ –≤ —Å–ø–∏—Å–∫–µ –ø–∏–≤–∞
        beer_list = await load_beer_list()
        selected_beer = next((beer for beer in beer_list if beer['id'] == beer_id), None)
        
        if selected_beer is None:
            await cq.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –ø–∏–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        # –°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–ù—Ä–∞–≤–∏—Ç—Å—è" –∏ "–ù–µ –Ω—Ä–∞–≤–∏—Ç—Å—è"
        buttons = [
            [InlineKeyboardButton(text="üëç", callback_data=f"like_{beer_id}"),
            InlineKeyboardButton(text="üëé", callback_data=f"dislike_{beer_id}")]
        ]
        markup = InlineKeyboardMarkup(inline_keyboard=buttons)

        # –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–∏–≤–∞ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await cq.message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {selected_beer['name']}", reply_markup=markup)

    except Exception as e:
        await cq.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

async def update_vote_and_respond(cq: CallbackQuery, beer_id: int, vote: str):
    user_id = cq.from_user.id

    # –ù–∞–π–¥–∏—Ç–µ –ø–∏–≤–æ –≤ —Å–ø–∏—Å–∫–µ –ø–∏–≤–∞
    beer_list = await load_beer_list()
    selected_beer = next((beer for beer in beer_list if beer['id'] == beer_id), None)
    
    if selected_beer is None:
        await cq.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –ø–∏–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    # –û–±–Ω–æ–≤–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
    update_vote_results(user_id, selected_beer['id'], vote)

    await cq.answer("–í–∞—à –≥–æ–ª–æ—Å —É—á—Ç–µ–Ω!")
    await cq.message.delete()


async def handle_exception(cq: CallbackQuery, e: Exception):
    await cq.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


