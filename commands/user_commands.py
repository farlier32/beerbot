from aiogram import types, F
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters.state import State, StatesGroup
from aiogram.types.callback_query import CallbackQuery
from aiogram import Router
from aiogram.exceptions import TelegramBadRequest



import keyboards.reply as kb
import utils.messages as text
from utils.searcher import search_by_beer, search_by_breweries
from utils.db_loader import load_beer_list
from utils.permissions import is_gromozeka
from utils.messages import gromozeka
from sqlalchemy import func
from sqlalchemy.future import select
from db.database import AsyncSessionLocal
from db.models import *



router = Router()

search_page = 1
rating_page = 1
items_per_page = 10

search_results = []


@router.message(Command("start"))
async def start_handler(msg: Message):
    user_id = msg.from_user.id
    first_name = msg.from_user.first_name
    last_name = msg.from_user.last_name
    nickname = msg.from_user.username

    if await is_gromozeka(user_id):
        await msg.answer(gromozeka)
        return

    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    new_user = User(
        user_id=user_id,
        nickname=nickname,
        first_name=first_name,
        last_name=last_name,
        permissions=0
    )

    # –†–∞–±–æ—Ç–∞–µ–º —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    async with AsyncSessionLocal() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        result = await session.execute(select(User).where(User.user_id == user_id))
        existing_user = result.scalars().first()

        if not existing_user:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            session.add(new_user)
        else:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –¥–∞–Ω–Ω—ã–µ
            existing_user.nicname = nickname
            existing_user.first_name = first_name
            existing_user.last_name = last_name

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await session.commit()

    await msg.answer(text.greet.format(name=msg.from_user.full_name), reply_markup=kb.menu)





@router.message(F.text == "–ú–µ–Ω—é")
async def menu(msg: Message):
    user_id = msg.from_user.id

    if await is_gromozeka(user_id):
        await msg.answer(gromozeka)
        return
    await msg.answer(text.menu, reply_markup=kb.menu)

@router.message(F.text == "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å üìÇ")
async def profile_handler(message: types.Message):
    user_id = message.from_user.id

    if await is_gromozeka(user_id):
        await message.answer(gromozeka)
        return
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb.user_menu)
    
@router.message(F.text == "–ò–Ω—Ñ–æüßæ")
async def info_handler(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.first_name

    if await is_gromozeka(user_id):
        await message.answer(gromozeka)
        return

    # –†–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    async with AsyncSessionLocal() as session:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        result = await session.execute(select(User).where(User.user_id == user_id))
        user_info = result.scalars().first()

        if not user_info:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –ü–æ–¥—Å—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = await session.execute(select(Rating).where(Rating.user_id == user_id))
        user_ratings = result.scalars().all()

        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–æ–∫
        num_votes = len(user_ratings)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    await message.answer(f"–ò–º—è: {username}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–æ–∫: {num_votes}‚≠êÔ∏è")

@router.message(F.text == "–°–ø–∏—Å–æ–∫ –º–µ—Å—Ç üèò")
async def places_handler(message: types.Message):
    user_id = message.from_user.id

    if await is_gromozeka(user_id):
        await message.answer(gromozeka)
        return

    async with AsyncSessionLocal() as session:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–µ—Å—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        result = await session.execute(select(Place))
        places = result.scalars().all()

        if not places:
            await message.answer("–ú–µ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return

        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—Ç–∞
        buttons = [
            [InlineKeyboardButton(text=place.place_name, callback_data=f"place_{place.place_id}")]
            for place in places
        ]
        markup = InlineKeyboardMarkup(inline_keyboard=buttons)

        await message.answer("–°–ø–∏—Å–æ–∫ –º–µ—Å—Ç:", reply_markup=markup)

@router.callback_query(F.data.startswith("place_"))
async def place_callback_handler(cq: CallbackQuery):
    try:
        # –ò–∑–≤–ª–µ–∫–∏—Ç–µ place_id –∏–∑ –¥–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
        place_id = int(cq.data.split("_")[1])

        async with AsyncSessionLocal() as session:
            # –ü–æ–ª—É—á–∞–µ–º –º–µ—Å—Ç–æ –ø–æ place_id
            result = await session.execute(select(Place).where(Place.place_id == place_id))
            place = result.scalars().first()

            if not place:
                await cq.message.answer(f"–ú–µ—Å—Ç–æ —Å ID {place_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                return

            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–∏–≤, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤ —ç—Ç–æ–º –º–µ—Å—Ç–µ —á–µ—Ä–µ–∑ —Ç–∞–±–ª–∏—Ü—É place_beers
            result = await session.execute(select(Beer).join(PlaceBeer).where(PlaceBeer.place_id == place_id))
            beers_in_place = result.scalars().all()

            if not beers_in_place:
                await cq.message.answer(f"–í –º–µ—Å—Ç–µ {place.place_name} –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –ø–∏–≤–∞.")
                return

            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∏–≤–∞
            buttons = [
                [InlineKeyboardButton(text=beer.name, callback_data=f"beer_{beer.beer_id}")]
                for beer in beers_in_place
            ]
            markup = InlineKeyboardMarkup(inline_keyboard=buttons)

            await cq.message.answer(f"–ú–µ—Å—Ç–æ: {place.place_name}\n–ü–∏–≤–æ:", reply_markup=markup)

    except Exception as e:
        await cq.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

@router.callback_query(F.data.startswith("beer_"))
async def beer_callback_handler(cq: CallbackQuery):
    try:
        # –ò–∑–≤–ª–µ–∫–∏—Ç–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–∏–≤–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
        beer_id = int(cq.data.split("_")[1])

        async with AsyncSessionLocal() as session:
            # –ù–∞–π–¥–∏—Ç–µ –ø–∏–≤–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            result = await session.execute(select(Beer).where(Beer.beer_id == beer_id))
            selected_beer = result.scalars().first()

            if selected_beer is None:
                await cq.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –ø–∏–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                return

            # –°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –ø–∏–≤–∞ –æ—Ç 1 –¥–æ 5
            buttons = [
                [InlineKeyboardButton(text="1Ô∏è‚É£", callback_data=f"rate_1_{beer_id}"),
                 InlineKeyboardButton(text="2Ô∏è‚É£", callback_data=f"rate_2_{beer_id}"),
                 InlineKeyboardButton(text="3Ô∏è‚É£", callback_data=f"rate_3_{beer_id}"),
                 InlineKeyboardButton(text="4Ô∏è‚É£", callback_data=f"rate_4_{beer_id}"),
                 InlineKeyboardButton(text="5Ô∏è‚É£", callback_data=f"rate_5_{beer_id}")]
            ]
            markup = InlineKeyboardMarkup(inline_keyboard=buttons)

            # –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–∏–≤–∞ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞
            await cq.message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {selected_beer.name}\n–ü–æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ü–µ–Ω–∫—É –æ—Ç 1 –¥–æ 5:", reply_markup=markup)

    except Exception as e:
        await cq.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

@router.callback_query(F.data.startswith("rate_"))
async def rate_callback_handler(cq: CallbackQuery):
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ü–µ–Ω–∫—É –∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–∏–≤–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
        rating_value = int(cq.data.split("_")[1])
        beer_id = int(cq.data.split("_")[2])
        user_id = cq.from_user.id

        async with AsyncSessionLocal() as session:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞ –¥–ª—è —ç—Ç–æ–≥–æ –ø–∏–≤–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            result = await session.execute(select(Rating).where(Rating.user_id == user_id, Rating.beer_id == beer_id))
            existing_rating = result.scalars().first()

            if existing_rating:
                # –ï—Å–ª–∏ —Ä–µ–π—Ç–∏–Ω–≥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
                existing_rating.rating = rating_value
            else:
                # –ï—Å–ª–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                new_rating = Rating(user_id=user_id, beer_id=beer_id, rating=rating_value)
                session.add(new_rating)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            await session.commit()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await cq.message.answer(f"–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞ ‚Äî {rating_value} ‚≠êÔ∏è")

    except Exception as e:
        await cq.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–∞—à–µ–π –æ—Ü–µ–Ω–∫–∏: {e}")


@router.callback_query(F.data.startswith("rate_"))
async def rate_callback_handler(cq: CallbackQuery):
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ü–µ–Ω–∫—É –∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–∏–≤–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
        rating_value = int(cq.data.split("_")[1])
        beer_id = int(cq.data.split("_")[2])
        user_id = cq.from_user.id

        async with AsyncSessionLocal() as session:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞ –¥–ª—è —ç—Ç–æ–≥–æ –ø–∏–≤–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            result = await session.execute(select(Rating).where(Rating.user_id == user_id, Rating.beer_id == beer_id))
            existing_rating = result.scalars().first()

            if existing_rating:
                # –ï—Å–ª–∏ —Ä–µ–π—Ç–∏–Ω–≥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
                existing_rating.rating = rating_value
            else:
                # –ï—Å–ª–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                new_rating = Rating(user_id=user_id, beer_id=beer_id, rating=rating_value)
                session.add(new_rating)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            await session.commit()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await cq.message.answer(f"–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞ ‚Äî {rating_value} ‚≠êÔ∏è")

    except Exception as e:
        await cq.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–∞—à–µ–π –æ—Ü–µ–Ω–∫–∏: {e}")


@router.message(F.text == "–ú–æ–∏ –æ—Ü–µ–Ω–∫–∏‚≠êÔ∏è")
async def handle_user_ratings(message: types.Message, state: FSMContext):
    try:
        user_id = message.from_user.id

        async with AsyncSessionLocal() as session:
            result = await session.execute(
                select(Beer, Rating.rating)
                .join(Rating, Rating.beer_id == Beer.beer_id)
                .where(Rating.user_id == user_id)
            )
            user_ratings = result.all()

        if not user_ratings:
            await message.answer("–í—ã –µ—â–µ –Ω–µ –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –æ—Ü–µ–Ω–∫–∏.")
            return

        # –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –æ—Ü–µ–Ω–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(user_ratings=user_ratings, rating_page=1)

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ—Ü–µ–Ω–æ–∫
        await display_user_ratings(message, user_ratings, 1)
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


async def display_user_ratings(message: types.Message, user_ratings, page, is_new_message=False):
    start = (page - 1) * 10
    end = start + 10
    page_items = user_ratings[start:end]

    buttons = [
        [
            InlineKeyboardButton(
                text=f"{beer.name} / {beer.brewery} - {rating} ‚≠êÔ∏è",
                callback_data=f"item_{beer.beer_id}"
            )
        ]
        for beer, rating in page_items
    ]

    navigation_buttons = []
    if page > 1:
        navigation_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"rating_page:{page - 1}"))
    if end < len(user_ratings):
        navigation_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"rating_page:{page + 1}"))

    if navigation_buttons:
        buttons.append(navigation_buttons)

    markup = InlineKeyboardMarkup(inline_keyboard=buttons)

    try:
        if is_new_message:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await message.answer("–í–∞—à–∏ –æ—Ü–µ–Ω–∫–∏:", reply_markup=markup)
        else:
            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await message.edit_text("–í–∞—à–∏ –æ—Ü–µ–Ω–∫–∏:", reply_markup=markup)
    except TelegramBadRequest as e:
        if "can't be edited" in str(e):
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–ª—å–∑—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            await message.answer("–í–∞—à–∏ –æ—Ü–µ–Ω–∫–∏:", reply_markup=markup)
        else:
            raise



@router.callback_query(F.data.startswith("rating_page:"))
async def rating_page_callback_handler(cq: CallbackQuery, state: FSMContext):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ–∫—É—â–∏—Ö –æ—Ü–µ–Ω–∫–∞—Ö –∏ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        user_ratings = data.get("user_ratings", [])
        page = int(cq.data.split(":")[1])

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ü–µ–Ω–∫–∞–º–∏
        await display_user_ratings(cq.message, user_ratings, page)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(rating_page=page)
    except Exception as e:
        await cq.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", show_alert=True)



@router.message(F.text.lower() == "–≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")
async def search_handler(message: types.Message, state: FSMContext):
    await message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é...", reply_markup=kb.menu)
    await state.clear()


@router.callback_query(F.data.startswith("item_"))
async def item_callback_handler(cq: CallbackQuery):
    try:
        # –ò–∑–≤–ª–µ–∫–∏—Ç–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–∏–≤–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
        beer_id = int(cq.data.split("_")[1])

        # –ù–∞–π–¥–∏—Ç–µ –ø–∏–≤–æ –≤ —Å–ø–∏—Å–∫–µ –ø–∏–≤–∞
        beer_list = await load_beer_list()
        selected_beer = next((beer for beer in beer_list if beer['id'] == beer_id), None)

        if selected_beer is None:
            await cq.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –ø–∏–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        # –°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ 1, 2, 3, 4, 5 –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –ø–∏–≤–∞
        buttons = [
            [InlineKeyboardButton(text="1Ô∏è‚É£", callback_data=f"rate_1_{beer_id}"),
             InlineKeyboardButton(text="2Ô∏è‚É£", callback_data=f"rate_2_{beer_id}"),
             InlineKeyboardButton(text="3Ô∏è‚É£", callback_data=f"rate_3_{beer_id}"),
             InlineKeyboardButton(text="4Ô∏è‚É£", callback_data=f"rate_4_{beer_id}"),
             InlineKeyboardButton(text="5Ô∏è‚É£", callback_data=f"rate_5_{beer_id}")]
        ]
        markup = InlineKeyboardMarkup(inline_keyboard=buttons)

        # –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–∏–≤–∞ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await cq.message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {selected_beer['name']}\n–û—Ü–µ–Ω–∏—Ç–µ —ç—Ç–æ –ø–∏–≤–æ:", reply_markup=markup)

    except Exception as e:
        await cq.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

##############################################################################################################################################

class SearchState(StatesGroup):
    WaitingForBeerQuery = State()
    WaitingForBreweryQuery = State()


@router.message(F.text == "–ü–æ–∏—Å–∫ üîç")
async def search_handler(message: types.Message):
    user_id = message.from_user.id

    if await is_gromozeka(user_id):
        await message.answer(gromozeka)
        return
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞:", reply_markup=kb.search_menu)

@router.message(F.text == "–ü–æ–∏—Å–∫ –ø–æ –ø–∏–≤–æ–≤–∞—Ä–Ω—è–º")
async def search_brewery_handler(message: types.Message, state: FSMContext):
    user_id = message.from_user.id

    if await is_gromozeka(user_id):
        await message.answer(gromozeka)
        return

    try:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∏–≤–æ–≤–∞—Ä–Ω–∏, –∫–æ—Ç–æ—Ä—É—é –≤—ã –∏—â–µ—Ç–µ:")
        await state.set_state(SearchState.WaitingForBreweryQuery.state)
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

@router.message(F.text == "–ü–æ–∏—Å–∫ –ø–æ –ø–∏–≤—É")
async def search_beer_handler(message: types.Message, state: FSMContext):
    user_id = message.from_user.id

    if await is_gromozeka(user_id):
        await message.answer(gromozeka)
        return

    try:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∏–≤–∞, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –∏—â–µ—Ç–µ:")
        await state.set_state(SearchState.WaitingForBeerQuery.state)
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

@router.message(F.text.lower() == "–≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")
async def search_handler(message: types.Message, state: FSMContext):
    await message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é...", reply_markup=kb.menu)
    await state.clear()


async def get_search_results(query: str, search_function, page: int):
    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
    search_results = await search_function(query)

    if not search_results:
        return None, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞
    start = (page - 1) * 10
    end = start + 10
    page_items = search_results[start:end]

    buttons = [
        [InlineKeyboardButton(text=f"{item['name']} / ({item['brewery']})", callback_data=f"item_{item['id']}")]
        for item in page_items
    ]

    # –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    navigation_buttons = []
    if page > 1:
        navigation_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"search_results:{page - 1}"))
    if end < len(search_results):
        navigation_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"search_results:{page + 1}"))

    if navigation_buttons:
        buttons.append(navigation_buttons)

    markup = InlineKeyboardMarkup(inline_keyboard=buttons)
    return markup, None  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏ –æ—à–∏–±–∫—É (–µ—Å–ª–∏ –µ—Å—Ç—å)



@router.message(SearchState.WaitingForBeerQuery)
async def get_search_results_beer(message: types.Message, state: FSMContext):
    try:
        search_query = message.text
        search_results = await search_by_beer(search_query)  # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫

        if not search_results:
            await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(search_results=search_results)

        page = 1  # –ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        markup, error = await get_search_results_for_page(state, page)

        if error:
            await message.answer(error)
            return

        await message.answer("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:", reply_markup=markup)
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

async def get_search_results_for_page(state: FSMContext, page: int):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."""
    data = await state.get_data()
    search_results = data.get("search_results", [])

    if not search_results:
        return None, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start = (page - 1) * 10
    end = start + 10
    page_items = search_results[start:end]

    buttons = [
        [InlineKeyboardButton(text=f"{item['name']} / ({item['brewery']})", callback_data=f"item_{item['id']}")]
        for item in page_items
    ]

    # –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    navigation_buttons = []
    if page > 1:
        navigation_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"search_results:{page - 1}"))
    if end < len(search_results):
        navigation_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"search_results:{page + 1}"))

    if navigation_buttons:
        buttons.append(navigation_buttons)

    markup = InlineKeyboardMarkup(inline_keyboard=buttons)
    return markup, None

@router.callback_query(F.data.startswith("search_results:"))
async def search_results_callback_handler(cq: CallbackQuery, state: FSMContext):
    try:
        page = int(cq.data.split(":")[1])  # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã

        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        markup, error = await get_search_results_for_page(state, page)

        if error:
            await cq.answer(error)
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await cq.message.edit_text("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:", reply_markup=markup)
    except Exception as e:
        await cq.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")



@router.message(SearchState.WaitingForBreweryQuery)
async def get_search_results_breweries(message: types.Message, state: FSMContext):
    try:
        search_query = message.text
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
        search_results = await search_by_breweries(search_query)

        if not search_results:
            await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(search_results=search_results)

        page = 1  # –ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        markup, error = await get_search_results_for_page(state, page)

        if error:
            await message.answer(error)
            return

        await message.answer("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–∏–≤–æ–≤–∞—Ä–µ–Ω:", reply_markup=markup)
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
